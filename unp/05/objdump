
sigblock:     file format elf32-i386


Disassembly of section .init:

08048438 <_init>:
 8048438:	55                   	push   %ebp
 8048439:	89 e5                	mov    %esp,%ebp
 804843b:	53                   	push   %ebx
 804843c:	83 ec 04             	sub    $0x4,%esp
 804843f:	e8 00 00 00 00       	call   8048444 <_init+0xc>
 8048444:	5b                   	pop    %ebx
 8048445:	81 c3 b0 1b 00 00    	add    $0x1bb0,%ebx
 804844b:	8b 93 fc ff ff ff    	mov    -0x4(%ebx),%edx
 8048451:	85 d2                	test   %edx,%edx
 8048453:	74 05                	je     804845a <_init+0x22>
 8048455:	e8 3e 00 00 00       	call   8048498 <__gmon_start__@plt>
 804845a:	e8 51 01 00 00       	call   80485b0 <frame_dummy>
 804845f:	e8 dc 02 00 00       	call   8048740 <__do_global_ctors_aux>
 8048464:	58                   	pop    %eax
 8048465:	5b                   	pop    %ebx
 8048466:	c9                   	leave  
 8048467:	c3                   	ret    

Disassembly of section .plt:

08048468 <sigemptyset@plt-0x10>:
 8048468:	ff 35 f8 9f 04 08    	pushl  0x8049ff8
 804846e:	ff 25 fc 9f 04 08    	jmp    *0x8049ffc
 8048474:	00 00                	add    %al,(%eax)
	...

08048478 <sigemptyset@plt>:
 8048478:	ff 25 00 a0 04 08    	jmp    *0x804a000
 804847e:	68 00 00 00 00       	push   $0x0
 8048483:	e9 e0 ff ff ff       	jmp    8048468 <_init+0x30>

08048488 <sigismember@plt>:
 8048488:	ff 25 04 a0 04 08    	jmp    *0x804a004
 804848e:	68 08 00 00 00       	push   $0x8
 8048493:	e9 d0 ff ff ff       	jmp    8048468 <_init+0x30>

08048498 <__gmon_start__@plt>:
 8048498:	ff 25 08 a0 04 08    	jmp    *0x804a008
 804849e:	68 10 00 00 00       	push   $0x10
 80484a3:	e9 c0 ff ff ff       	jmp    8048468 <_init+0x30>

080484a8 <__libc_start_main@plt>:
 80484a8:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80484ae:	68 18 00 00 00       	push   $0x18
 80484b3:	e9 b0 ff ff ff       	jmp    8048468 <_init+0x30>

080484b8 <sigpending@plt>:
 80484b8:	ff 25 10 a0 04 08    	jmp    *0x804a010
 80484be:	68 20 00 00 00       	push   $0x20
 80484c3:	e9 a0 ff ff ff       	jmp    8048468 <_init+0x30>

080484c8 <sigprocmask@plt>:
 80484c8:	ff 25 14 a0 04 08    	jmp    *0x804a014
 80484ce:	68 28 00 00 00       	push   $0x28
 80484d3:	e9 90 ff ff ff       	jmp    8048468 <_init+0x30>

080484d8 <sleep@plt>:
 80484d8:	ff 25 18 a0 04 08    	jmp    *0x804a018
 80484de:	68 30 00 00 00       	push   $0x30
 80484e3:	e9 80 ff ff ff       	jmp    8048468 <_init+0x30>

080484e8 <sigaddset@plt>:
 80484e8:	ff 25 1c a0 04 08    	jmp    *0x804a01c
 80484ee:	68 38 00 00 00       	push   $0x38
 80484f3:	e9 70 ff ff ff       	jmp    8048468 <_init+0x30>

080484f8 <puts@plt>:
 80484f8:	ff 25 20 a0 04 08    	jmp    *0x804a020
 80484fe:	68 40 00 00 00       	push   $0x40
 8048503:	e9 60 ff ff ff       	jmp    8048468 <_init+0x30>

08048508 <_IO_putc@plt>:
 8048508:	ff 25 24 a0 04 08    	jmp    *0x804a024
 804850e:	68 48 00 00 00       	push   $0x48
 8048513:	e9 50 ff ff ff       	jmp    8048468 <_init+0x30>

Disassembly of section .text:

08048520 <_start>:
 8048520:	31 ed                	xor    %ebp,%ebp
 8048522:	5e                   	pop    %esi
 8048523:	89 e1                	mov    %esp,%ecx
 8048525:	83 e4 f0             	and    $0xfffffff0,%esp
 8048528:	50                   	push   %eax
 8048529:	54                   	push   %esp
 804852a:	52                   	push   %edx
 804852b:	68 d0 86 04 08       	push   $0x80486d0
 8048530:	68 e0 86 04 08       	push   $0x80486e0
 8048535:	51                   	push   %ecx
 8048536:	56                   	push   %esi
 8048537:	68 60 86 04 08       	push   $0x8048660
 804853c:	e8 67 ff ff ff       	call   80484a8 <__libc_start_main@plt>
 8048541:	f4                   	hlt    
 8048542:	90                   	nop
 8048543:	90                   	nop
 8048544:	90                   	nop
 8048545:	90                   	nop
 8048546:	90                   	nop
 8048547:	90                   	nop
 8048548:	90                   	nop
 8048549:	90                   	nop
 804854a:	90                   	nop
 804854b:	90                   	nop
 804854c:	90                   	nop
 804854d:	90                   	nop
 804854e:	90                   	nop
 804854f:	90                   	nop

08048550 <__do_global_dtors_aux>:
 8048550:	55                   	push   %ebp
 8048551:	89 e5                	mov    %esp,%ebp
 8048553:	53                   	push   %ebx
 8048554:	83 ec 04             	sub    $0x4,%esp
 8048557:	80 3d 44 a0 04 08 00 	cmpb   $0x0,0x804a044
 804855e:	75 3f                	jne    804859f <__do_global_dtors_aux+0x4f>
 8048560:	a1 48 a0 04 08       	mov    0x804a048,%eax
 8048565:	bb 10 9f 04 08       	mov    $0x8049f10,%ebx
 804856a:	81 eb 0c 9f 04 08    	sub    $0x8049f0c,%ebx
 8048570:	c1 fb 02             	sar    $0x2,%ebx
 8048573:	83 eb 01             	sub    $0x1,%ebx
 8048576:	39 d8                	cmp    %ebx,%eax
 8048578:	73 1e                	jae    8048598 <__do_global_dtors_aux+0x48>
 804857a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048580:	83 c0 01             	add    $0x1,%eax
 8048583:	a3 48 a0 04 08       	mov    %eax,0x804a048
 8048588:	ff 14 85 0c 9f 04 08 	call   *0x8049f0c(,%eax,4)
 804858f:	a1 48 a0 04 08       	mov    0x804a048,%eax
 8048594:	39 d8                	cmp    %ebx,%eax
 8048596:	72 e8                	jb     8048580 <__do_global_dtors_aux+0x30>
 8048598:	c6 05 44 a0 04 08 01 	movb   $0x1,0x804a044
 804859f:	83 c4 04             	add    $0x4,%esp
 80485a2:	5b                   	pop    %ebx
 80485a3:	5d                   	pop    %ebp
 80485a4:	c3                   	ret    
 80485a5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80485a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080485b0 <frame_dummy>:
 80485b0:	55                   	push   %ebp
 80485b1:	89 e5                	mov    %esp,%ebp
 80485b3:	83 ec 18             	sub    $0x18,%esp
 80485b6:	a1 14 9f 04 08       	mov    0x8049f14,%eax
 80485bb:	85 c0                	test   %eax,%eax
 80485bd:	74 12                	je     80485d1 <frame_dummy+0x21>
 80485bf:	b8 00 00 00 00       	mov    $0x0,%eax
 80485c4:	85 c0                	test   %eax,%eax
 80485c6:	74 09                	je     80485d1 <frame_dummy+0x21>
 80485c8:	c7 04 24 14 9f 04 08 	movl   $0x8049f14,(%esp)
 80485cf:	ff d0                	call   *%eax
 80485d1:	c9                   	leave  
 80485d2:	c3                   	ret    
 80485d3:	90                   	nop
 80485d4:	90                   	nop
 80485d5:	90                   	nop
 80485d6:	90                   	nop
 80485d7:	90                   	nop
 80485d8:	90                   	nop
 80485d9:	90                   	nop
 80485da:	90                   	nop
 80485db:	90                   	nop
 80485dc:	90                   	nop
 80485dd:	90                   	nop
 80485de:	90                   	nop
 80485df:	90                   	nop

080485e0 <printsigset>:
 */
#include<signal.h>
#include<stdio.h>
#include<unistd.h>

void printsigset(const sigset_t *set){
 80485e0:	55                   	push   %ebp
 80485e1:	89 e5                	mov    %esp,%ebp
 80485e3:	56                   	push   %esi
 80485e4:	53                   	push   %ebx
 80485e5:	bb 01 00 00 00       	mov    $0x1,%ebx
 80485ea:	83 ec 10             	sub    $0x10,%esp
 80485ed:	8b 75 08             	mov    0x8(%ebp),%esi
 80485f0:	eb 23                	jmp    8048615 <printsigset+0x35>
 80485f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

/* Write a character to stdout.  */
__STDIO_INLINE int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
 80485f8:	a1 40 a0 04 08       	mov    0x804a040,%eax
	int i;
	for(i = 1; i < 32; i++){
 80485fd:	83 c3 01             	add    $0x1,%ebx
 8048600:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
 8048607:	89 44 24 04          	mov    %eax,0x4(%esp)
 804860b:	e8 f8 fe ff ff       	call   8048508 <_IO_putc@plt>
 8048610:	83 fb 20             	cmp    $0x20,%ebx
 8048613:	74 2e                	je     8048643 <printsigset+0x63>
		/*current signal is the member of i*/
		if( sigismember(set, i) == 1)
 8048615:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8048619:	89 34 24             	mov    %esi,(%esp)
 804861c:	e8 67 fe ff ff       	call   8048488 <sigismember@plt>
 8048621:	83 f8 01             	cmp    $0x1,%eax
 8048624:	75 d2                	jne    80485f8 <printsigset+0x18>
 8048626:	a1 40 a0 04 08       	mov    0x804a040,%eax
#include<stdio.h>
#include<unistd.h>

void printsigset(const sigset_t *set){
	int i;
	for(i = 1; i < 32; i++){
 804862b:	83 c3 01             	add    $0x1,%ebx
 804862e:	c7 04 24 31 00 00 00 	movl   $0x31,(%esp)
 8048635:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048639:	e8 ca fe ff ff       	call   8048508 <_IO_putc@plt>
 804863e:	83 fb 20             	cmp    $0x20,%ebx
 8048641:	75 d2                	jne    8048615 <printsigset+0x35>
		if( sigismember(set, i) == 1)
			putchar('1');
		else
			putchar('0');
	}
	puts("");
 8048643:	c7 45 08 90 87 04 08 	movl   $0x8048790,0x8(%ebp)
}
 804864a:	83 c4 10             	add    $0x10,%esp
 804864d:	5b                   	pop    %ebx
 804864e:	5e                   	pop    %esi
 804864f:	5d                   	pop    %ebp
		if( sigismember(set, i) == 1)
			putchar('1');
		else
			putchar('0');
	}
	puts("");
 8048650:	e9 a3 fe ff ff       	jmp    80484f8 <puts@plt>
 8048655:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8048659:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

08048660 <main>:
}

int main(void){
 8048660:	55                   	push   %ebp
 8048661:	89 e5                	mov    %esp,%ebp
 8048663:	83 e4 f0             	and    $0xfffffff0,%esp
 8048666:	53                   	push   %ebx
 8048667:	81 ec 1c 01 00 00    	sub    $0x11c,%esp
	sigset_t s, p;
	sigemptyset(&s);
 804866d:	8d 9c 24 90 00 00 00 	lea    0x90(%esp),%ebx
 8048674:	89 1c 24             	mov    %ebx,(%esp)
 8048677:	e8 fc fd ff ff       	call   8048478 <sigemptyset@plt>
	sigaddset(&s, SIGINT);
 804867c:	89 1c 24             	mov    %ebx,(%esp)
 804867f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
 8048686:	00 
 8048687:	e8 5c fe ff ff       	call   80484e8 <sigaddset@plt>
	sigprocmask(SIG_BLOCK, &s, NULL);
 804868c:	89 5c 24 04          	mov    %ebx,0x4(%esp)
 8048690:	8d 5c 24 10          	lea    0x10(%esp),%ebx
 8048694:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
 804869b:	00 
 804869c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 80486a3:	e8 20 fe ff ff       	call   80484c8 <sigprocmask@plt>
	while(1){
		sigpending(&p);/*get the pending signal.*/
 80486a8:	89 1c 24             	mov    %ebx,(%esp)
 80486ab:	e8 08 fe ff ff       	call   80484b8 <sigpending@plt>
		printsigset(&p);
 80486b0:	89 1c 24             	mov    %ebx,(%esp)
 80486b3:	e8 28 ff ff ff       	call   80485e0 <printsigset>
		sleep(1);
 80486b8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 80486bf:	e8 14 fe ff ff       	call   80484d8 <sleep@plt>
 80486c4:	eb e2                	jmp    80486a8 <main+0x48>
 80486c6:	90                   	nop
 80486c7:	90                   	nop
 80486c8:	90                   	nop
 80486c9:	90                   	nop
 80486ca:	90                   	nop
 80486cb:	90                   	nop
 80486cc:	90                   	nop
 80486cd:	90                   	nop
 80486ce:	90                   	nop
 80486cf:	90                   	nop

080486d0 <__libc_csu_fini>:
 80486d0:	55                   	push   %ebp
 80486d1:	89 e5                	mov    %esp,%ebp
 80486d3:	5d                   	pop    %ebp
 80486d4:	c3                   	ret    
 80486d5:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80486d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080486e0 <__libc_csu_init>:
 80486e0:	55                   	push   %ebp
 80486e1:	89 e5                	mov    %esp,%ebp
 80486e3:	57                   	push   %edi
 80486e4:	56                   	push   %esi
 80486e5:	53                   	push   %ebx
 80486e6:	e8 4f 00 00 00       	call   804873a <__i686.get_pc_thunk.bx>
 80486eb:	81 c3 09 19 00 00    	add    $0x1909,%ebx
 80486f1:	83 ec 1c             	sub    $0x1c,%esp
 80486f4:	e8 3f fd ff ff       	call   8048438 <_init>
 80486f9:	8d bb 10 ff ff ff    	lea    -0xf0(%ebx),%edi
 80486ff:	8d 83 10 ff ff ff    	lea    -0xf0(%ebx),%eax
 8048705:	29 c7                	sub    %eax,%edi
 8048707:	c1 ff 02             	sar    $0x2,%edi
 804870a:	85 ff                	test   %edi,%edi
 804870c:	74 24                	je     8048732 <__libc_csu_init+0x52>
 804870e:	31 f6                	xor    %esi,%esi
 8048710:	8b 45 10             	mov    0x10(%ebp),%eax
 8048713:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048717:	8b 45 0c             	mov    0xc(%ebp),%eax
 804871a:	89 44 24 04          	mov    %eax,0x4(%esp)
 804871e:	8b 45 08             	mov    0x8(%ebp),%eax
 8048721:	89 04 24             	mov    %eax,(%esp)
 8048724:	ff 94 b3 10 ff ff ff 	call   *-0xf0(%ebx,%esi,4)
 804872b:	83 c6 01             	add    $0x1,%esi
 804872e:	39 fe                	cmp    %edi,%esi
 8048730:	72 de                	jb     8048710 <__libc_csu_init+0x30>
 8048732:	83 c4 1c             	add    $0x1c,%esp
 8048735:	5b                   	pop    %ebx
 8048736:	5e                   	pop    %esi
 8048737:	5f                   	pop    %edi
 8048738:	5d                   	pop    %ebp
 8048739:	c3                   	ret    

0804873a <__i686.get_pc_thunk.bx>:
 804873a:	8b 1c 24             	mov    (%esp),%ebx
 804873d:	c3                   	ret    
 804873e:	90                   	nop
 804873f:	90                   	nop

08048740 <__do_global_ctors_aux>:
 8048740:	55                   	push   %ebp
 8048741:	89 e5                	mov    %esp,%ebp
 8048743:	53                   	push   %ebx
 8048744:	83 ec 04             	sub    $0x4,%esp
 8048747:	a1 04 9f 04 08       	mov    0x8049f04,%eax
 804874c:	83 f8 ff             	cmp    $0xffffffff,%eax
 804874f:	74 13                	je     8048764 <__do_global_ctors_aux+0x24>
 8048751:	bb 04 9f 04 08       	mov    $0x8049f04,%ebx
 8048756:	66 90                	xchg   %ax,%ax
 8048758:	83 eb 04             	sub    $0x4,%ebx
 804875b:	ff d0                	call   *%eax
 804875d:	8b 03                	mov    (%ebx),%eax
 804875f:	83 f8 ff             	cmp    $0xffffffff,%eax
 8048762:	75 f4                	jne    8048758 <__do_global_ctors_aux+0x18>
 8048764:	83 c4 04             	add    $0x4,%esp
 8048767:	5b                   	pop    %ebx
 8048768:	5d                   	pop    %ebp
 8048769:	c3                   	ret    
 804876a:	90                   	nop
 804876b:	90                   	nop

Disassembly of section .fini:

0804876c <_fini>:
 804876c:	55                   	push   %ebp
 804876d:	89 e5                	mov    %esp,%ebp
 804876f:	53                   	push   %ebx
 8048770:	83 ec 04             	sub    $0x4,%esp
 8048773:	e8 00 00 00 00       	call   8048778 <_fini+0xc>
 8048778:	5b                   	pop    %ebx
 8048779:	81 c3 7c 18 00 00    	add    $0x187c,%ebx
 804877f:	e8 cc fd ff ff       	call   8048550 <__do_global_dtors_aux>
 8048784:	59                   	pop    %ecx
 8048785:	5b                   	pop    %ebx
 8048786:	c9                   	leave  
 8048787:	c3                   	ret    
